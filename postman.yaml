trigger:
  - main

pool:
  vmImage: 'windows-latest'

steps:
  - script: |
      npm install -g newman newman-reporter-htmlextra
    displayName: 'Install Newman and Html Reporter'

  - script: |
      echo "Creating reports directory..."
      mkdir "$(Build.ArtifactStagingDirectory)\reports"
      echo "Directory created successfully."
      echo "Running Newman tests..."
      newman run Test_fire.postman_collection.json --environment Brocaly.postman_environment.json -r cli,htmlextra --reporter-htmlextra-export "$(Build.ArtifactStagingDirectory)\reports\report.html"
      echo "Newman tests completed successfully."
    displayName: 'Run API Tests and Create Report'

  - task: PublishPipelineArtifact@1
    displayName: 'Publish HTML Report'
    inputs:
      targetPath: '$(Build.ArtifactStagingDirectory)\reports'
      artifact: 'Report'

  - task: PowerShell@2
    inputs:
        targetType: 'inline'
        script: |
          # SMTP configuration for AWS SES
          $smtpServer = "email-smtp.eu-west-1.amazonaws.com"
          $smtpPort = 587
          $from = "no-reply@mail.englishscore.com"
          #$to = @("susmit.surwade@blenheimchalcot.com","satyendra.kumar@blenheimchalcot.com","ami.jambusaria@blenheimchalcot.com","rinkesh.das@blenheimchalcot.com")
          $to = @("susmit.surwade@blenheimchalcot.com")
          # Get today's date
          $todayDate = Get-Date -Format "dd-MM-yyyy"
          
          # Set the email subject
          $subject = "Daily Report: Brocaly [Azure platform] Production API Automation report for $todayDate"
          
          # SMTP credentials
          $username = "AKIA5YBB6OJ66G2MXV7B"
          $password = "BMX8OsOi7Gy4OLgEsaKvyICJQbDOYv8XVEHtE2DGcLIE"
          
          # Email body
          $emailBody = "Please find the attached API's health report."
          
          # Path to the HTML report
          $attachmentPath = "$(Build.ArtifactStagingDirectory)\reports\report.html"
          
          # Check if the report file exists before sending the email
          if (Test-Path $attachmentPath) {
              # Send email with attached HTML report using TLS/SSL
              $securePassword = ConvertTo-SecureString $password -AsPlainText -Force
              $credential = New-Object System.Management.Automation.PSCredential ($username, $securePassword)
              Send-MailMessage -SmtpServer $smtpServer -Port $smtpPort -From $from -To $to -Subject $subject -Body $emailBody -Attachments $attachmentPath -Credential $credential -UseSsl
          } else {
              Write-Error "Report file not found: $attachmentPath"
              exit 1
          }
    displayName: 'Send Email with attached HTML Report'